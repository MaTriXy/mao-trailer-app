// Generated by Dagger (https://google.github.io/dagger).
package com.movie.maotrailer.di.module;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import okhttp3.logging.HttpLoggingInterceptor;

public final class NetModule_ProvideOkHttpClientFactory implements Factory<OkHttpClient> {
  private final NetModule module;

  private final Provider<HttpLoggingInterceptor> httpLoggingInterceptorProvider;

  public NetModule_ProvideOkHttpClientFactory(
      NetModule module, Provider<HttpLoggingInterceptor> httpLoggingInterceptorProvider) {
    this.module = module;
    this.httpLoggingInterceptorProvider = httpLoggingInterceptorProvider;
  }

  @Override
  public OkHttpClient get() {
    return provideInstance(module, httpLoggingInterceptorProvider);
  }

  public static OkHttpClient provideInstance(
      NetModule module, Provider<HttpLoggingInterceptor> httpLoggingInterceptorProvider) {
    return proxyProvideOkHttpClient(module, httpLoggingInterceptorProvider.get());
  }

  public static NetModule_ProvideOkHttpClientFactory create(
      NetModule module, Provider<HttpLoggingInterceptor> httpLoggingInterceptorProvider) {
    return new NetModule_ProvideOkHttpClientFactory(module, httpLoggingInterceptorProvider);
  }

  public static OkHttpClient proxyProvideOkHttpClient(
      NetModule instance, HttpLoggingInterceptor httpLoggingInterceptor) {
    return Preconditions.checkNotNull(
        instance.provideOkHttpClient(httpLoggingInterceptor),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
