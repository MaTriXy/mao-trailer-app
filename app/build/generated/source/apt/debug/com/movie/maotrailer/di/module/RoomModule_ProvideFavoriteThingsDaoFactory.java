// Generated by Dagger (https://google.github.io/dagger).
package com.movie.maotrailer.di.module;

import com.movie.maotrailer.data.local.dao.FavoriteThingsDao;
import com.movie.maotrailer.db.MaoDatabase;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class RoomModule_ProvideFavoriteThingsDaoFactory
    implements Factory<FavoriteThingsDao> {
  private final RoomModule module;

  private final Provider<MaoDatabase> maoDatabaseProvider;

  public RoomModule_ProvideFavoriteThingsDaoFactory(
      RoomModule module, Provider<MaoDatabase> maoDatabaseProvider) {
    this.module = module;
    this.maoDatabaseProvider = maoDatabaseProvider;
  }

  @Override
  public FavoriteThingsDao get() {
    return provideInstance(module, maoDatabaseProvider);
  }

  public static FavoriteThingsDao provideInstance(
      RoomModule module, Provider<MaoDatabase> maoDatabaseProvider) {
    return proxyProvideFavoriteThingsDao(module, maoDatabaseProvider.get());
  }

  public static RoomModule_ProvideFavoriteThingsDaoFactory create(
      RoomModule module, Provider<MaoDatabase> maoDatabaseProvider) {
    return new RoomModule_ProvideFavoriteThingsDaoFactory(module, maoDatabaseProvider);
  }

  public static FavoriteThingsDao proxyProvideFavoriteThingsDao(
      RoomModule instance, MaoDatabase maoDatabase) {
    return Preconditions.checkNotNull(
        instance.provideFavoriteThingsDao(maoDatabase),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
