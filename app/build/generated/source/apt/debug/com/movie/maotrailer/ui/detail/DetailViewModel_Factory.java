// Generated by Dagger (https://google.github.io/dagger).
package com.movie.maotrailer.ui.detail;

import com.movie.maotrailer.api.repository.EndpointRepository;
import dagger.internal.Factory;
import io.reactivex.disposables.CompositeDisposable;
import javax.inject.Provider;

public final class DetailViewModel_Factory implements Factory<DetailViewModel> {
  private final Provider<EndpointRepository> endpointRepositoryProvider;

  private final Provider<CompositeDisposable> compositeDisposableProvider;

  public DetailViewModel_Factory(
      Provider<EndpointRepository> endpointRepositoryProvider,
      Provider<CompositeDisposable> compositeDisposableProvider) {
    this.endpointRepositoryProvider = endpointRepositoryProvider;
    this.compositeDisposableProvider = compositeDisposableProvider;
  }

  @Override
  public DetailViewModel get() {
    return provideInstance(endpointRepositoryProvider, compositeDisposableProvider);
  }

  public static DetailViewModel provideInstance(
      Provider<EndpointRepository> endpointRepositoryProvider,
      Provider<CompositeDisposable> compositeDisposableProvider) {
    return new DetailViewModel(endpointRepositoryProvider.get(), compositeDisposableProvider.get());
  }

  public static DetailViewModel_Factory create(
      Provider<EndpointRepository> endpointRepositoryProvider,
      Provider<CompositeDisposable> compositeDisposableProvider) {
    return new DetailViewModel_Factory(endpointRepositoryProvider, compositeDisposableProvider);
  }

  public static DetailViewModel newDetailViewModel(
      EndpointRepository endpointRepository, CompositeDisposable compositeDisposable) {
    return new DetailViewModel(endpointRepository, compositeDisposable);
  }
}
