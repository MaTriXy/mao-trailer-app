// Generated by Dagger (https://google.github.io/dagger).
package com.movie.maotrailer.ui.detail;

import android.app.Application;
import com.movie.maotrailer.api.repository.EndpointRepository;
import com.movie.maotrailer.data.local.repository.FavoriteThingsRepository;
import dagger.internal.Factory;
import io.reactivex.disposables.CompositeDisposable;
import javax.inject.Provider;

public final class DetailViewModel_Factory implements Factory<DetailViewModel> {
  private final Provider<Application> applicationProvider;

  private final Provider<EndpointRepository> endpointRepositoryProvider;

  private final Provider<CompositeDisposable> compositeDisposableProvider;

  private final Provider<FavoriteThingsRepository> favoriteThingsRepositoryProvider;

  public DetailViewModel_Factory(
      Provider<Application> applicationProvider,
      Provider<EndpointRepository> endpointRepositoryProvider,
      Provider<CompositeDisposable> compositeDisposableProvider,
      Provider<FavoriteThingsRepository> favoriteThingsRepositoryProvider) {
    this.applicationProvider = applicationProvider;
    this.endpointRepositoryProvider = endpointRepositoryProvider;
    this.compositeDisposableProvider = compositeDisposableProvider;
    this.favoriteThingsRepositoryProvider = favoriteThingsRepositoryProvider;
  }

  @Override
  public DetailViewModel get() {
    return provideInstance(
        applicationProvider,
        endpointRepositoryProvider,
        compositeDisposableProvider,
        favoriteThingsRepositoryProvider);
  }

  public static DetailViewModel provideInstance(
      Provider<Application> applicationProvider,
      Provider<EndpointRepository> endpointRepositoryProvider,
      Provider<CompositeDisposable> compositeDisposableProvider,
      Provider<FavoriteThingsRepository> favoriteThingsRepositoryProvider) {
    return new DetailViewModel(
        applicationProvider.get(),
        endpointRepositoryProvider.get(),
        compositeDisposableProvider.get(),
        favoriteThingsRepositoryProvider.get());
  }

  public static DetailViewModel_Factory create(
      Provider<Application> applicationProvider,
      Provider<EndpointRepository> endpointRepositoryProvider,
      Provider<CompositeDisposable> compositeDisposableProvider,
      Provider<FavoriteThingsRepository> favoriteThingsRepositoryProvider) {
    return new DetailViewModel_Factory(
        applicationProvider,
        endpointRepositoryProvider,
        compositeDisposableProvider,
        favoriteThingsRepositoryProvider);
  }

  public static DetailViewModel newDetailViewModel(
      Application application,
      EndpointRepository endpointRepository,
      CompositeDisposable compositeDisposable,
      FavoriteThingsRepository favoriteThingsRepository) {
    return new DetailViewModel(
        application, endpointRepository, compositeDisposable, favoriteThingsRepository);
  }
}
