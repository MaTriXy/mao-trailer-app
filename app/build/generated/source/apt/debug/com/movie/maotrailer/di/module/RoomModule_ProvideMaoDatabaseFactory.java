// Generated by Dagger (https://google.github.io/dagger).
package com.movie.maotrailer.di.module;

import android.app.Application;
import android.arch.persistence.room.migration.Migration;
import com.movie.maotrailer.db.MaoDatabase;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class RoomModule_ProvideMaoDatabaseFactory implements Factory<MaoDatabase> {
  private final RoomModule module;

  private final Provider<Application> applicationProvider;

  private final Provider<Migration> migrationProvider;

  public RoomModule_ProvideMaoDatabaseFactory(
      RoomModule module,
      Provider<Application> applicationProvider,
      Provider<Migration> migrationProvider) {
    this.module = module;
    this.applicationProvider = applicationProvider;
    this.migrationProvider = migrationProvider;
  }

  @Override
  public MaoDatabase get() {
    return provideInstance(module, applicationProvider, migrationProvider);
  }

  public static MaoDatabase provideInstance(
      RoomModule module,
      Provider<Application> applicationProvider,
      Provider<Migration> migrationProvider) {
    return proxyProvideMaoDatabase(module, applicationProvider.get(), migrationProvider.get());
  }

  public static RoomModule_ProvideMaoDatabaseFactory create(
      RoomModule module,
      Provider<Application> applicationProvider,
      Provider<Migration> migrationProvider) {
    return new RoomModule_ProvideMaoDatabaseFactory(module, applicationProvider, migrationProvider);
  }

  public static MaoDatabase proxyProvideMaoDatabase(
      RoomModule instance, Application application, Migration migration) {
    return Preconditions.checkNotNull(
        instance.provideMaoDatabase(application, migration),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
