// Generated by Dagger (https://google.github.io/dagger).
package com.movie.maotrailer.di.component;

import android.app.Activity;
import android.app.Application;
import android.app.Fragment;
import android.app.Service;
import android.arch.lifecycle.ViewModel;
import android.arch.persistence.room.migration.Migration;
import android.content.BroadcastReceiver;
import android.content.ContentProvider;
import android.content.SharedPreferences;
import com.google.gson.Gson;
import com.movie.maotrailer.MaoApp;
import com.movie.maotrailer.api.ITMDBService;
import com.movie.maotrailer.api.repository.EndpointRepository_Factory;
import com.movie.maotrailer.data.local.dao.FavoriteThingsDao;
import com.movie.maotrailer.data.local.repository.FavoriteThingsRepository;
import com.movie.maotrailer.data.local.repository.FavoriteThingsRepository_Factory;
import com.movie.maotrailer.db.MaoDatabase;
import com.movie.maotrailer.di.module.ActivityBuilder_ContributesDetailActivityInjector;
import com.movie.maotrailer.di.module.ActivityBuilder_ContributesFavoriteActivityInjector;
import com.movie.maotrailer.di.module.ActivityBuilder_ContributesMainActivityInjector;
import com.movie.maotrailer.di.module.ActivityBuilder_ContributesSplashActivityInjector;
import com.movie.maotrailer.di.module.AppModule;
import com.movie.maotrailer.di.module.AppModule_ProvideCompositeDisposableFactory;
import com.movie.maotrailer.di.module.AppModule_ProvideSharedPreferencesFactory;
import com.movie.maotrailer.di.module.FragmentBuilder_ContributesMovieFragmentInjector;
import com.movie.maotrailer.di.module.FragmentBuilder_ContributesProfileFragmentInjector;
import com.movie.maotrailer.di.module.FragmentBuilder_ContributesTvFragmentInjector;
import com.movie.maotrailer.di.module.NetModule;
import com.movie.maotrailer.di.module.NetModule_ProvideGsonFactory;
import com.movie.maotrailer.di.module.NetModule_ProvideHttpLoggingInterceptorFactory;
import com.movie.maotrailer.di.module.NetModule_ProvideITMDBServiceFactory;
import com.movie.maotrailer.di.module.NetModule_ProvideOkHttpClientFactory;
import com.movie.maotrailer.di.module.NetModule_ProvideRetrofitFactory;
import com.movie.maotrailer.di.module.RoomModule;
import com.movie.maotrailer.di.module.RoomModule_ProvideFavoriteThingsDaoFactory;
import com.movie.maotrailer.di.module.RoomModule_ProvideMaoDatabaseFactory;
import com.movie.maotrailer.di.module.RoomModule_ProvideMigrationFactory;
import com.movie.maotrailer.helper.AppsExecutor;
import com.movie.maotrailer.helper.AppsExecutor_Factory;
import com.movie.maotrailer.paging.ItemDataSourceFactory_Factory;
import com.movie.maotrailer.paging.ItemDataSource_Factory;
import com.movie.maotrailer.ui.detail.DetailActivity;
import com.movie.maotrailer.ui.detail.DetailActivity_MembersInjector;
import com.movie.maotrailer.ui.detail.DetailViewModel;
import com.movie.maotrailer.ui.detail.DetailViewModel_Factory;
import com.movie.maotrailer.ui.favorite.FavoriteActivity;
import com.movie.maotrailer.ui.favorite.FavoriteActivity_MembersInjector;
import com.movie.maotrailer.ui.favorite.FavoriteViewModel;
import com.movie.maotrailer.ui.favorite.FavoriteViewModel_Factory;
import com.movie.maotrailer.ui.main.MainActivity;
import com.movie.maotrailer.ui.main.fragments.movie.MovieFragment;
import com.movie.maotrailer.ui.main.fragments.movie.MovieFragment_MembersInjector;
import com.movie.maotrailer.ui.main.fragments.movie.MovieViewModel;
import com.movie.maotrailer.ui.main.fragments.movie.MovieViewModel_Factory;
import com.movie.maotrailer.ui.main.fragments.profile.ProfileFragment;
import com.movie.maotrailer.ui.main.fragments.tv.TvFragment;
import com.movie.maotrailer.ui.main.fragments.tv.TvFragment_MembersInjector;
import com.movie.maotrailer.ui.main.fragments.tv.TvViewModel;
import com.movie.maotrailer.ui.main.fragments.tv.TvViewModel_Factory;
import com.movie.maotrailer.ui.splash.SplashActivity;
import com.movie.maotrailer.utils.ColumnUtils;
import com.movie.maotrailer.utils.ColumnUtils_Factory;
import com.movie.maotrailer.utils.ConnectionUtils;
import com.movie.maotrailer.utils.SharedPreferencesUtil;
import com.movie.maotrailer.viewmodel.MaoViewModelFactory;
import com.movie.maotrailer.viewmodel.MaoViewModelFactory_Factory;
import dagger.android.AndroidInjector;
import dagger.android.DaggerApplication_MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.android.support.DaggerAppCompatActivity_MembersInjector;
import dagger.android.support.DaggerFragment_MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.MapBuilder;
import dagger.internal.MapProviderFactory;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import okhttp3.logging.HttpLoggingInterceptor;
import retrofit2.Retrofit;

public final class DaggerAppComponent implements AppComponent {
  private RoomModule roomModule;

  private AppModule appModule;

  private Application application;

  private Provider<ActivityBuilder_ContributesMainActivityInjector.MainActivitySubcomponent.Builder>
      mainActivitySubcomponentBuilderProvider;

  private Provider<
          ActivityBuilder_ContributesSplashActivityInjector.SplashActivitySubcomponent.Builder>
      splashActivitySubcomponentBuilderProvider;

  private Provider<
          ActivityBuilder_ContributesDetailActivityInjector.DetailActivitySubcomponent.Builder>
      detailActivitySubcomponentBuilderProvider;

  private Provider<
          ActivityBuilder_ContributesFavoriteActivityInjector.FavoriteActivitySubcomponent.Builder>
      favoriteActivitySubcomponentBuilderProvider;

  private Provider<
          FragmentBuilder_ContributesMovieFragmentInjector.MovieFragmentSubcomponent.Builder>
      movieFragmentSubcomponentBuilderProvider;

  private Provider<FragmentBuilder_ContributesTvFragmentInjector.TvFragmentSubcomponent.Builder>
      tvFragmentSubcomponentBuilderProvider;

  private Provider<
          FragmentBuilder_ContributesProfileFragmentInjector.ProfileFragmentSubcomponent.Builder>
      profileFragmentSubcomponentBuilderProvider;

  private Provider<HttpLoggingInterceptor> provideHttpLoggingInterceptorProvider;

  private Provider<OkHttpClient> provideOkHttpClientProvider;

  private Provider<Gson> provideGsonProvider;

  private Provider<Retrofit> provideRetrofitProvider;

  private Provider<ITMDBService> provideITMDBServiceProvider;

  private EndpointRepository_Factory endpointRepositoryProvider;

  private AppModule_ProvideCompositeDisposableFactory provideCompositeDisposableProvider;

  private ItemDataSource_Factory itemDataSourceProvider;

  private ItemDataSourceFactory_Factory itemDataSourceFactoryProvider;

  private MovieViewModel_Factory movieViewModelProvider;

  private TvViewModel_Factory tvViewModelProvider;

  private Provider<Application> applicationProvider;

  private Provider<Migration> provideMigrationProvider;

  private Provider<MaoDatabase> provideMaoDatabaseProvider;

  private RoomModule_ProvideFavoriteThingsDaoFactory provideFavoriteThingsDaoProvider;

  private FavoriteThingsRepository_Factory favoriteThingsRepositoryProvider;

  private DetailViewModel_Factory detailViewModelProvider;

  private FavoriteViewModel_Factory favoriteViewModelProvider;

  private Provider<Map<Class<? extends ViewModel>, Provider<ViewModel>>>
      mapOfClassOfAndProviderOfViewModelProvider;

  private Provider<MaoViewModelFactory> maoViewModelFactoryProvider;

  private Provider<ColumnUtils> columnUtilsProvider;

  private DaggerAppComponent(Builder builder) {
    initialize(builder);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
      getMapOfClassOfAndProviderOfFactoryOf() {
    return MapBuilder
        .<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
            newMapBuilder(4)
        .put(MainActivity.class, (Provider) mainActivitySubcomponentBuilderProvider)
        .put(SplashActivity.class, (Provider) splashActivitySubcomponentBuilderProvider)
        .put(DetailActivity.class, (Provider) detailActivitySubcomponentBuilderProvider)
        .put(FavoriteActivity.class, (Provider) favoriteActivitySubcomponentBuilderProvider)
        .build();
  }

  private DispatchingAndroidInjector<Activity> getDispatchingAndroidInjectorOfActivity() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf());
  }

  private DispatchingAndroidInjector<BroadcastReceiver>
      getDispatchingAndroidInjectorOfBroadcastReceiver() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        Collections
            .<Class<? extends BroadcastReceiver>,
                Provider<AndroidInjector.Factory<? extends BroadcastReceiver>>>
                emptyMap());
  }

  private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        Collections
            .<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
                emptyMap());
  }

  private DispatchingAndroidInjector<Service> getDispatchingAndroidInjectorOfService() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        Collections
            .<Class<? extends Service>, Provider<AndroidInjector.Factory<? extends Service>>>
                emptyMap());
  }

  private DispatchingAndroidInjector<ContentProvider>
      getDispatchingAndroidInjectorOfContentProvider() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        Collections
            .<Class<? extends ContentProvider>,
                Provider<AndroidInjector.Factory<? extends ContentProvider>>>
                emptyMap());
  }

  private Map<
          Class<? extends android.support.v4.app.Fragment>,
          Provider<AndroidInjector.Factory<? extends android.support.v4.app.Fragment>>>
      getMapOfClassOfAndProviderOfFactoryOf2() {
    return MapBuilder
        .<Class<? extends android.support.v4.app.Fragment>,
            Provider<AndroidInjector.Factory<? extends android.support.v4.app.Fragment>>>
            newMapBuilder(3)
        .put(MovieFragment.class, (Provider) movieFragmentSubcomponentBuilderProvider)
        .put(TvFragment.class, (Provider) tvFragmentSubcomponentBuilderProvider)
        .put(ProfileFragment.class, (Provider) profileFragmentSubcomponentBuilderProvider)
        .build();
  }

  private DispatchingAndroidInjector<android.support.v4.app.Fragment>
      getDispatchingAndroidInjectorOfFragment2() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf2());
  }

  private FavoriteThingsDao getFavoriteThingsDao() {
    return RoomModule_ProvideFavoriteThingsDaoFactory.proxyProvideFavoriteThingsDao(
        roomModule, provideMaoDatabaseProvider.get());
  }

  private FavoriteThingsRepository getFavoriteThingsRepository() {
    return new FavoriteThingsRepository(getFavoriteThingsDao(), new AppsExecutor());
  }

  private SharedPreferences getSharedPreferences() {
    return AppModule_ProvideSharedPreferencesFactory.proxyProvideSharedPreferences(
        appModule, application);
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.mainActivitySubcomponentBuilderProvider =
        new Provider<
            ActivityBuilder_ContributesMainActivityInjector.MainActivitySubcomponent.Builder>() {
          @Override
          public ActivityBuilder_ContributesMainActivityInjector.MainActivitySubcomponent.Builder
              get() {
            return new MainActivitySubcomponentBuilder();
          }
        };
    this.splashActivitySubcomponentBuilderProvider =
        new Provider<
            ActivityBuilder_ContributesSplashActivityInjector.SplashActivitySubcomponent
                .Builder>() {
          @Override
          public ActivityBuilder_ContributesSplashActivityInjector.SplashActivitySubcomponent
                  .Builder
              get() {
            return new SplashActivitySubcomponentBuilder();
          }
        };
    this.detailActivitySubcomponentBuilderProvider =
        new Provider<
            ActivityBuilder_ContributesDetailActivityInjector.DetailActivitySubcomponent
                .Builder>() {
          @Override
          public ActivityBuilder_ContributesDetailActivityInjector.DetailActivitySubcomponent
                  .Builder
              get() {
            return new DetailActivitySubcomponentBuilder();
          }
        };
    this.favoriteActivitySubcomponentBuilderProvider =
        new Provider<
            ActivityBuilder_ContributesFavoriteActivityInjector.FavoriteActivitySubcomponent
                .Builder>() {
          @Override
          public ActivityBuilder_ContributesFavoriteActivityInjector.FavoriteActivitySubcomponent
                  .Builder
              get() {
            return new FavoriteActivitySubcomponentBuilder();
          }
        };
    this.movieFragmentSubcomponentBuilderProvider =
        new Provider<
            FragmentBuilder_ContributesMovieFragmentInjector.MovieFragmentSubcomponent.Builder>() {
          @Override
          public FragmentBuilder_ContributesMovieFragmentInjector.MovieFragmentSubcomponent.Builder
              get() {
            return new MovieFragmentSubcomponentBuilder();
          }
        };
    this.tvFragmentSubcomponentBuilderProvider =
        new Provider<
            FragmentBuilder_ContributesTvFragmentInjector.TvFragmentSubcomponent.Builder>() {
          @Override
          public FragmentBuilder_ContributesTvFragmentInjector.TvFragmentSubcomponent.Builder
              get() {
            return new TvFragmentSubcomponentBuilder();
          }
        };
    this.profileFragmentSubcomponentBuilderProvider =
        new Provider<
            FragmentBuilder_ContributesProfileFragmentInjector.ProfileFragmentSubcomponent
                .Builder>() {
          @Override
          public FragmentBuilder_ContributesProfileFragmentInjector.ProfileFragmentSubcomponent
                  .Builder
              get() {
            return new ProfileFragmentSubcomponentBuilder();
          }
        };
    this.provideHttpLoggingInterceptorProvider =
        DoubleCheck.provider(
            NetModule_ProvideHttpLoggingInterceptorFactory.create(builder.netModule));
    this.provideOkHttpClientProvider =
        DoubleCheck.provider(
            NetModule_ProvideOkHttpClientFactory.create(
                builder.netModule, provideHttpLoggingInterceptorProvider));
    this.provideGsonProvider =
        DoubleCheck.provider(NetModule_ProvideGsonFactory.create(builder.netModule));
    this.provideRetrofitProvider =
        DoubleCheck.provider(
            NetModule_ProvideRetrofitFactory.create(
                builder.netModule, provideOkHttpClientProvider, provideGsonProvider));
    this.provideITMDBServiceProvider =
        DoubleCheck.provider(
            NetModule_ProvideITMDBServiceFactory.create(
                builder.netModule, provideRetrofitProvider));
    this.endpointRepositoryProvider =
        EndpointRepository_Factory.create(provideITMDBServiceProvider);
    this.provideCompositeDisposableProvider =
        AppModule_ProvideCompositeDisposableFactory.create(builder.appModule);
    this.itemDataSourceProvider =
        ItemDataSource_Factory.create(
            endpointRepositoryProvider, provideCompositeDisposableProvider);
    this.itemDataSourceFactoryProvider =
        ItemDataSourceFactory_Factory.create(itemDataSourceProvider);
    this.movieViewModelProvider =
        MovieViewModel_Factory.create(itemDataSourceFactoryProvider, AppsExecutor_Factory.create());
    this.tvViewModelProvider =
        TvViewModel_Factory.create(itemDataSourceFactoryProvider, AppsExecutor_Factory.create());
    this.applicationProvider = InstanceFactory.create(builder.application);
    this.provideMigrationProvider =
        DoubleCheck.provider(RoomModule_ProvideMigrationFactory.create(builder.roomModule));
    this.provideMaoDatabaseProvider =
        DoubleCheck.provider(
            RoomModule_ProvideMaoDatabaseFactory.create(
                builder.roomModule, applicationProvider, provideMigrationProvider));
    this.provideFavoriteThingsDaoProvider =
        RoomModule_ProvideFavoriteThingsDaoFactory.create(
            builder.roomModule, provideMaoDatabaseProvider);
    this.favoriteThingsRepositoryProvider =
        FavoriteThingsRepository_Factory.create(
            provideFavoriteThingsDaoProvider, AppsExecutor_Factory.create());
    this.detailViewModelProvider =
        DetailViewModel_Factory.create(
            applicationProvider,
            endpointRepositoryProvider,
            provideCompositeDisposableProvider,
            favoriteThingsRepositoryProvider);
    this.favoriteViewModelProvider =
        FavoriteViewModel_Factory.create(favoriteThingsRepositoryProvider);
    this.mapOfClassOfAndProviderOfViewModelProvider =
        MapProviderFactory.<Class<? extends ViewModel>, ViewModel>builder(4)
            .put(MovieViewModel.class, (Provider) movieViewModelProvider)
            .put(TvViewModel.class, (Provider) tvViewModelProvider)
            .put(DetailViewModel.class, (Provider) detailViewModelProvider)
            .put(FavoriteViewModel.class, (Provider) favoriteViewModelProvider)
            .build();
    this.maoViewModelFactoryProvider =
        DoubleCheck.provider(
            MaoViewModelFactory_Factory.create(mapOfClassOfAndProviderOfViewModelProvider));
    this.roomModule = builder.roomModule;
    this.columnUtilsProvider =
        DoubleCheck.provider(ColumnUtils_Factory.create((Provider) applicationProvider));
    this.appModule = builder.appModule;
    this.application = builder.application;
  }

  @Override
  public void inject(MaoApp instance) {
    injectMaoApp(instance);
  }

  private MaoApp injectMaoApp(MaoApp instance) {
    DaggerApplication_MembersInjector.injectActivityInjector(
        instance, getDispatchingAndroidInjectorOfActivity());
    DaggerApplication_MembersInjector.injectBroadcastReceiverInjector(
        instance, getDispatchingAndroidInjectorOfBroadcastReceiver());
    DaggerApplication_MembersInjector.injectFragmentInjector(
        instance, getDispatchingAndroidInjectorOfFragment());
    DaggerApplication_MembersInjector.injectServiceInjector(
        instance, getDispatchingAndroidInjectorOfService());
    DaggerApplication_MembersInjector.injectContentProviderInjector(
        instance, getDispatchingAndroidInjectorOfContentProvider());
    DaggerApplication_MembersInjector.injectSetInjected(instance);
    dagger.android.support.DaggerApplication_MembersInjector.injectSupportFragmentInjector(
        instance, getDispatchingAndroidInjectorOfFragment2());
    return instance;
  }

  private static final class Builder implements AppComponent.Builder {
    private NetModule netModule;

    private AppModule appModule;

    private RoomModule roomModule;

    private Application application;

    @Override
    public AppComponent build() {
      if (netModule == null) {
        this.netModule = new NetModule();
      }
      if (appModule == null) {
        this.appModule = new AppModule();
      }
      if (roomModule == null) {
        this.roomModule = new RoomModule();
      }
      if (application == null) {
        throw new IllegalStateException(Application.class.getCanonicalName() + " must be set");
      }
      return new DaggerAppComponent(this);
    }

    @Override
    public Builder application(Application application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }
  }

  private final class MainActivitySubcomponentBuilder
      extends ActivityBuilder_ContributesMainActivityInjector.MainActivitySubcomponent.Builder {
    private MainActivity seedInstance;

    @Override
    public ActivityBuilder_ContributesMainActivityInjector.MainActivitySubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(MainActivity.class.getCanonicalName() + " must be set");
      }
      return new MainActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(MainActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class MainActivitySubcomponentImpl
      implements ActivityBuilder_ContributesMainActivityInjector.MainActivitySubcomponent {
    private MainActivitySubcomponentImpl(MainActivitySubcomponentBuilder builder) {}

    @Override
    public void inject(MainActivity arg0) {
      injectMainActivity(arg0);
    }

    private MainActivity injectMainActivity(MainActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectSupportFragmentInjector(
          instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfFragment2());
      DaggerAppCompatActivity_MembersInjector.injectFrameworkFragmentInjector(
          instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfFragment());
      return instance;
    }
  }

  private final class SplashActivitySubcomponentBuilder
      extends ActivityBuilder_ContributesSplashActivityInjector.SplashActivitySubcomponent.Builder {
    private SplashActivity seedInstance;

    @Override
    public ActivityBuilder_ContributesSplashActivityInjector.SplashActivitySubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(SplashActivity.class.getCanonicalName() + " must be set");
      }
      return new SplashActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(SplashActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class SplashActivitySubcomponentImpl
      implements ActivityBuilder_ContributesSplashActivityInjector.SplashActivitySubcomponent {
    private SplashActivitySubcomponentImpl(SplashActivitySubcomponentBuilder builder) {}

    @Override
    public void inject(SplashActivity arg0) {
      injectSplashActivity(arg0);
    }

    private SplashActivity injectSplashActivity(SplashActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectSupportFragmentInjector(
          instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfFragment2());
      DaggerAppCompatActivity_MembersInjector.injectFrameworkFragmentInjector(
          instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfFragment());
      return instance;
    }
  }

  private final class DetailActivitySubcomponentBuilder
      extends ActivityBuilder_ContributesDetailActivityInjector.DetailActivitySubcomponent.Builder {
    private DetailActivity seedInstance;

    @Override
    public ActivityBuilder_ContributesDetailActivityInjector.DetailActivitySubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(DetailActivity.class.getCanonicalName() + " must be set");
      }
      return new DetailActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(DetailActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class DetailActivitySubcomponentImpl
      implements ActivityBuilder_ContributesDetailActivityInjector.DetailActivitySubcomponent {
    private DetailActivitySubcomponentImpl(DetailActivitySubcomponentBuilder builder) {}

    @Override
    public void inject(DetailActivity arg0) {
      injectDetailActivity(arg0);
    }

    private DetailActivity injectDetailActivity(DetailActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectSupportFragmentInjector(
          instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfFragment2());
      DaggerAppCompatActivity_MembersInjector.injectFrameworkFragmentInjector(
          instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfFragment());
      DetailActivity_MembersInjector.injectViewModelFactory(
          instance, DaggerAppComponent.this.maoViewModelFactoryProvider.get());
      DetailActivity_MembersInjector.injectFavoriteThingsRepository(
          instance, DaggerAppComponent.this.getFavoriteThingsRepository());
      return instance;
    }
  }

  private final class FavoriteActivitySubcomponentBuilder
      extends ActivityBuilder_ContributesFavoriteActivityInjector.FavoriteActivitySubcomponent
          .Builder {
    private FavoriteActivity seedInstance;

    @Override
    public ActivityBuilder_ContributesFavoriteActivityInjector.FavoriteActivitySubcomponent
        build() {
      if (seedInstance == null) {
        throw new IllegalStateException(FavoriteActivity.class.getCanonicalName() + " must be set");
      }
      return new FavoriteActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(FavoriteActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class FavoriteActivitySubcomponentImpl
      implements ActivityBuilder_ContributesFavoriteActivityInjector.FavoriteActivitySubcomponent {
    private FavoriteActivitySubcomponentImpl(FavoriteActivitySubcomponentBuilder builder) {}

    @Override
    public void inject(FavoriteActivity arg0) {
      injectFavoriteActivity(arg0);
    }

    private FavoriteActivity injectFavoriteActivity(FavoriteActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectSupportFragmentInjector(
          instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfFragment2());
      DaggerAppCompatActivity_MembersInjector.injectFrameworkFragmentInjector(
          instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfFragment());
      FavoriteActivity_MembersInjector.injectViewModelFactory(
          instance, DaggerAppComponent.this.maoViewModelFactoryProvider.get());
      FavoriteActivity_MembersInjector.injectColumnUtils(
          instance, DaggerAppComponent.this.columnUtilsProvider.get());
      return instance;
    }
  }

  private final class MovieFragmentSubcomponentBuilder
      extends FragmentBuilder_ContributesMovieFragmentInjector.MovieFragmentSubcomponent.Builder {
    private MovieFragment seedInstance;

    @Override
    public FragmentBuilder_ContributesMovieFragmentInjector.MovieFragmentSubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(MovieFragment.class.getCanonicalName() + " must be set");
      }
      return new MovieFragmentSubcomponentImpl(this);
    }

    @Override
    public void seedInstance(MovieFragment arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class MovieFragmentSubcomponentImpl
      implements FragmentBuilder_ContributesMovieFragmentInjector.MovieFragmentSubcomponent {
    private MovieFragmentSubcomponentImpl(MovieFragmentSubcomponentBuilder builder) {}

    private SharedPreferencesUtil getSharedPreferencesUtil() {
      return new SharedPreferencesUtil(DaggerAppComponent.this.getSharedPreferences());
    }

    private ConnectionUtils getConnectionUtils() {
      return new ConnectionUtils(DaggerAppComponent.this.application);
    }

    @Override
    public void inject(MovieFragment arg0) {
      injectMovieFragment(arg0);
    }

    private MovieFragment injectMovieFragment(MovieFragment instance) {
      DaggerFragment_MembersInjector.injectChildFragmentInjector(
          instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfFragment2());
      MovieFragment_MembersInjector.injectViewModelFactory(
          instance, DaggerAppComponent.this.maoViewModelFactoryProvider.get());
      MovieFragment_MembersInjector.injectColumnUtils(
          instance, DaggerAppComponent.this.columnUtilsProvider.get());
      MovieFragment_MembersInjector.injectSharedPreferencesUtil(
          instance, getSharedPreferencesUtil());
      MovieFragment_MembersInjector.injectConnectionUtils(instance, getConnectionUtils());
      return instance;
    }
  }

  private final class TvFragmentSubcomponentBuilder
      extends FragmentBuilder_ContributesTvFragmentInjector.TvFragmentSubcomponent.Builder {
    private TvFragment seedInstance;

    @Override
    public FragmentBuilder_ContributesTvFragmentInjector.TvFragmentSubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(TvFragment.class.getCanonicalName() + " must be set");
      }
      return new TvFragmentSubcomponentImpl(this);
    }

    @Override
    public void seedInstance(TvFragment arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class TvFragmentSubcomponentImpl
      implements FragmentBuilder_ContributesTvFragmentInjector.TvFragmentSubcomponent {
    private TvFragmentSubcomponentImpl(TvFragmentSubcomponentBuilder builder) {}

    private SharedPreferencesUtil getSharedPreferencesUtil() {
      return new SharedPreferencesUtil(DaggerAppComponent.this.getSharedPreferences());
    }

    private ConnectionUtils getConnectionUtils() {
      return new ConnectionUtils(DaggerAppComponent.this.application);
    }

    @Override
    public void inject(TvFragment arg0) {
      injectTvFragment(arg0);
    }

    private TvFragment injectTvFragment(TvFragment instance) {
      DaggerFragment_MembersInjector.injectChildFragmentInjector(
          instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfFragment2());
      TvFragment_MembersInjector.injectViewModelFactory(
          instance, DaggerAppComponent.this.maoViewModelFactoryProvider.get());
      TvFragment_MembersInjector.injectColumnUtils(
          instance, DaggerAppComponent.this.columnUtilsProvider.get());
      TvFragment_MembersInjector.injectSharedPreferencesUtil(instance, getSharedPreferencesUtil());
      TvFragment_MembersInjector.injectConnectionUtils(instance, getConnectionUtils());
      return instance;
    }
  }

  private final class ProfileFragmentSubcomponentBuilder
      extends FragmentBuilder_ContributesProfileFragmentInjector.ProfileFragmentSubcomponent
          .Builder {
    private ProfileFragment seedInstance;

    @Override
    public FragmentBuilder_ContributesProfileFragmentInjector.ProfileFragmentSubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(ProfileFragment.class.getCanonicalName() + " must be set");
      }
      return new ProfileFragmentSubcomponentImpl(this);
    }

    @Override
    public void seedInstance(ProfileFragment arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class ProfileFragmentSubcomponentImpl
      implements FragmentBuilder_ContributesProfileFragmentInjector.ProfileFragmentSubcomponent {
    private ProfileFragmentSubcomponentImpl(ProfileFragmentSubcomponentBuilder builder) {}

    @Override
    public void inject(ProfileFragment arg0) {
      injectProfileFragment(arg0);
    }

    private ProfileFragment injectProfileFragment(ProfileFragment instance) {
      DaggerFragment_MembersInjector.injectChildFragmentInjector(
          instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfFragment2());
      return instance;
    }
  }
}
