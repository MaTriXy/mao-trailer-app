// Generated by Dagger (https://google.github.io/dagger).
package com.movie.maotrailer.di.module;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import okhttp3.logging.HttpLoggingInterceptor;

public final class NetModule_ProvideHttpLoggingInterceptorFactory
    implements Factory<HttpLoggingInterceptor> {
  private final NetModule module;

  public NetModule_ProvideHttpLoggingInterceptorFactory(NetModule module) {
    this.module = module;
  }

  @Override
  public HttpLoggingInterceptor get() {
    return provideInstance(module);
  }

  public static HttpLoggingInterceptor provideInstance(NetModule module) {
    return proxyProvideHttpLoggingInterceptor(module);
  }

  public static NetModule_ProvideHttpLoggingInterceptorFactory create(NetModule module) {
    return new NetModule_ProvideHttpLoggingInterceptorFactory(module);
  }

  public static HttpLoggingInterceptor proxyProvideHttpLoggingInterceptor(NetModule instance) {
    return Preconditions.checkNotNull(
        instance.provideHttpLoggingInterceptor(),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
