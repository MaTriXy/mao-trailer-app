// Generated by Dagger (https://google.github.io/dagger).
package com.movie.maotrailer.ui.main.fragments.movie;

import com.movie.maotrailer.helper.AppsExecutor;
import com.movie.maotrailer.paging.ItemDataSourceFactory;
import dagger.internal.Factory;
import javax.inject.Provider;

public final class MovieViewModel_Factory implements Factory<MovieViewModel> {
  private final Provider<ItemDataSourceFactory> itemDataSourceFactoryProvider;

  private final Provider<AppsExecutor> appsExecutorProvider;

  public MovieViewModel_Factory(
      Provider<ItemDataSourceFactory> itemDataSourceFactoryProvider,
      Provider<AppsExecutor> appsExecutorProvider) {
    this.itemDataSourceFactoryProvider = itemDataSourceFactoryProvider;
    this.appsExecutorProvider = appsExecutorProvider;
  }

  @Override
  public MovieViewModel get() {
    return provideInstance(itemDataSourceFactoryProvider, appsExecutorProvider);
  }

  public static MovieViewModel provideInstance(
      Provider<ItemDataSourceFactory> itemDataSourceFactoryProvider,
      Provider<AppsExecutor> appsExecutorProvider) {
    return new MovieViewModel(itemDataSourceFactoryProvider.get(), appsExecutorProvider.get());
  }

  public static MovieViewModel_Factory create(
      Provider<ItemDataSourceFactory> itemDataSourceFactoryProvider,
      Provider<AppsExecutor> appsExecutorProvider) {
    return new MovieViewModel_Factory(itemDataSourceFactoryProvider, appsExecutorProvider);
  }

  public static MovieViewModel newMovieViewModel(
      ItemDataSourceFactory itemDataSourceFactory, AppsExecutor appsExecutor) {
    return new MovieViewModel(itemDataSourceFactory, appsExecutor);
  }
}
