// Generated by Dagger (https://google.github.io/dagger).
package com.movie.maotrailer.di.module;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import io.reactivex.disposables.CompositeDisposable;

public final class AppModule_ProvideCompositeDisposableFactory
    implements Factory<CompositeDisposable> {
  private final AppModule module;

  public AppModule_ProvideCompositeDisposableFactory(AppModule module) {
    this.module = module;
  }

  @Override
  public CompositeDisposable get() {
    return provideInstance(module);
  }

  public static CompositeDisposable provideInstance(AppModule module) {
    return proxyProvideCompositeDisposable(module);
  }

  public static AppModule_ProvideCompositeDisposableFactory create(AppModule module) {
    return new AppModule_ProvideCompositeDisposableFactory(module);
  }

  public static CompositeDisposable proxyProvideCompositeDisposable(AppModule instance) {
    return Preconditions.checkNotNull(
        instance.provideCompositeDisposable(),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
